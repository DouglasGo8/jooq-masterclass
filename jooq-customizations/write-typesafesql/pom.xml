<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <artifactId>jooq-customizations</artifactId>
    <groupId>com.packtpub.jooq.masterclass.customizations</groupId>
    <version>1.0.0</version>
  </parent>

  <groupId>com.packtpub.jooq.masterclass.customizations.safesql</groupId>
  <artifactId>write-typesafesql</artifactId>
  <version>1.0.0</version>

  <name>JOOQ :: Masterclass :: Custom Setups :: Write Type-Safe SQL</name>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>${codehaus.mojo.version}</version>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>read-project-properties</goal>
            </goals>
            <configuration>
              <files>
                <file>src/main/resources/application.properties</file>
              </files>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.flywaydb</groupId>
        <artifactId>flyway-maven-plugin</artifactId>
        <version>${flyway-maven-version}</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>migrate</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <driver>${spring.datasource.driver-class-name}</driver>
          <url>${spring.datasource.url}</url>
          <user>${spring.datasource.username}</user>
          <password>${spring.datasource.password}</password>
          <locations>
            <location>filesystem:../../db/migration/dev/postgresql</location>
          </locations>
          <schemas>
            <schema>public</schema>
          </schemas>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jooq</groupId>
        <artifactId>jooq-codegen-maven</artifactId>
        <version>${jooq-version}</version>
        <executions>
          <execution>
            <id>generate-for-postgresql</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration xmlns="http://www.jooq.org/xsd/jooq-codegen-3.16.0.xsd">
              <jdbc>
                <driver>${spring.datasource.driver-class-name}</driver>
                <url>${spring.datasource.url}</url>
                <user>${spring.datasource.username}</user>
                <password>${spring.datasource.password}</password>
              </jdbc>
              <generator>
                <!-- The default code generator.
                                   You can override this one, to generate your own code style.

                              Supported generators:
                              - org.jooq.codegen.JavaGenerator
                              - org.jooq.codegen.ScalaGenerator
                              - org.jooq.codegen.KotlinGenerator

                              Defaults to org.jooq.codegen.JavaGenerator -->
                <name>org.jooq.codegen.JavaGenerator</name>
                <database>
                  <!-- The database type. The format here is:
                                  org.jooq.meta.[database].[database]Database -->
                  <name>org.jooq.meta.postgres.PostgresDatabase</name>
                  <!-- The database schema (or in the absence of schema support, in your RDBMS this
                                                    can be the owner, user, database name) to be generated. This cannot be combined with the <schemata/> element.
                                                    If <inputSchema/> is missing then all schemas will be considered. -->
                  <inputSchema>public</inputSchema>
                  <!-- All elements that are generated from your schema
                                   (A Java regular expression. Use the pipe to separate several expressions)
                                   Watch out for case-sensitivity. Depending on your database, this might be important!
                                   You can create case-insensitive regular expressions using this syntax: (?i:expr).
                                   Whitespace is ignored and comments are possible. -->
                  <includes>.*</includes>
                  <!-- All elements that are excluded from your schema
                                   (A Java regular expression. Use the pipe to separate several expressions).
                                   Excludes match before includes, i.e. excludes have a higher priority. -->
                  <excludes>
                    flyway_schema_history | akeys | avals | defined | delete.*
                    | department_topic_arr | dup | employee_office_arr | exist.*
                    | fetchval | get_.* | ghstore.* | gin.* | hs.* | hstore.*
                    | isdefined | isexists | make_array | new_salary | populate_record
                    | sale_price | slice.* | swap | tconvert | update_msrp | postal_code
                    | evaluation_criteria | rate_type | vat_type | .*_master | each
                    | skeys | svals | top_three_sales_per_employee | product_of_product_line | .*_jooq
                  </excludes>
                  <!-- Schema version provider -->
                  <schemaVersionProvider>SELECT MAX("version") FROM "flyway_schema_history"</schemaVersionProvider>

                  <!-- Give enough time to jOOQ to trigger the queries needed for generating sources
                  (default is 5 seconds) -->
                  <logSlowQueriesAfterSeconds>20</logSlowQueriesAfterSeconds>
                </database>
                <target>
                  <!-- The destination package of your generated classes (within the destination directory).
               jOOQ may append the schema name to this package if generating multiple schemas,
                  e.g. org.jooq.your.packagename.schema1
                  org.jooq.your.packagename.schema2 -->
                  <packageName>jooq.generated</packageName>

                  <!-- The destination directory of your generated classes. Using Maven directory layout here. -->
                  <directory>target/generated-sources</directory>
                </target>
              </generator>
              <!-- A boolean property (or constant) can be specified here to tell the plugin not to do anything -->
              <skip>false</skip>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
